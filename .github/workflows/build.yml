#
#  //\\   OmenMon: Hardware Monitoring & Control Utility
# //  \\  Copyright © 2023-2024 Piotr Szczepański * License: GPL3
#     //  https://omenmon.github.io/
#
# OmenMon Build Workflow
# Builds the application with the specified version data

name: "OmenMon Build"
run-name: "OmenMon Build by ${{ github.actor }}"

on:
  workflow_call:
    inputs:
      version_number:
        description: "Version number (three dot-separated non-negative integers)"
        required: true
        type: string
      version_word:
        default: "Snapshot"
        description: "Build type (Preview, Release, Snapshot)"
        required: false
        type: string

  workflow_dispatch:
    inputs:
      version_number:
        default: "0.0.0"
        description: "Version number"
        required: true
        type: string
      version_word:
        default: "Snapshot"
        description: "Build type"
        options:
          - "Preview"
          - "Release"
          - "Snapshot"
        required: true
        type: choice

permissions:
  contents: read

jobs:
  call-bump:
    name: "Call Bump"
    secrets: inherit
    uses: ./.github/workflows/build_bump.yml

  build:
    name: "Build OmenMon"
    needs: call-bump
    runs-on: windows-2022

    strategy:
      matrix:
        configuration: ["Release"]
    
    env:
      SOLUTION_FILE: ${{ vars.SOLUTION_FILE || 'OmenMon.sln' }}
      BIN_DIR: ${{ vars.BIN_DIR || 'Bin' }}
      RESOURCES_DIR: ${{ vars.RESOURCES_DIR || 'Resources' }}
      RESOURCES_REPO: ${{ vars.RESOURCES_REPO || 'OmenMon/Resources' }}

    steps:
    - name: "Checkout OmenMon"
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: "Checkout OmenMon Resources"
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        path: ${{ env.RESOURCES_DIR }}
        repository: ${{ env.RESOURCES_REPO }}

    - name: "Set up Microsoft Build"
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64
        vs-version: "[17.7,)"

    - name: "Set up version variables"
      id: version
      run: |
        # Store original version for display/informational purposes
        echo "VERSION_ORIGINAL=${{ inputs.version_number }}" >> $GITHUB_OUTPUT
        
        # Extract version parts and replace non-numeric parts with zeros for assembly version
        VERSION="${{ inputs.version_number }}"
        # Split the version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        
        # Convert non-numeric parts to zeros and ensure at least 3 parts
        NUMERIC_VERSION=""
        for i in {0..2}; do
          if [ $i -lt ${#VERSION_PARTS[@]} ]; then
            # Check if the part is numeric
            if [[ "${VERSION_PARTS[$i]}" =~ ^[0-9]+$ ]]; then
              NUMERIC_VERSION+="${VERSION_PARTS[$i]}"
            else
              NUMERIC_VERSION+="0"
            fi
          else
            NUMERIC_VERSION+="0"
          fi
          
          # Add dot unless it's the last part
          if [ $i -lt 2 ]; then
            NUMERIC_VERSION+="."
          fi
        done
        
        echo "VERSION_BASE=$NUMERIC_VERSION" >> $GITHUB_OUTPUT
        
        # Use BUILD_NUMBER from vars or default to 0
        if [[ -n "${{ vars.BUILD_NUMBER }}" ]]; then
          echo "BUILD_NUM=${{ vars.BUILD_NUMBER }}" >> $GITHUB_OUTPUT
        else
          echo "BUILD_NUM=0" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: "Run Microsoft Build"
      working-directory: ${{ github.workspace }}
      run: >
        msbuild -m -noLogo
        -p:AssemblyVersion=${{ steps.version.outputs.VERSION_BASE }}.${{ steps.version.outputs.BUILD_NUM }}
        -p:AssemblyVersionWord=${{inputs.version_word}}
        -p:AssemblyInformationalVersion="${{ steps.version.outputs.VERSION_ORIGINAL }}-${{inputs.version_word}}"
        -p:Configuration=${{matrix.configuration}}
        -t:Build ${{ env.SOLUTION_FILE }}

    - name: "Retrieve Certificate"
      id: cert_retrieve
      continue-on-error: true
      working-directory: ${{ github.workspace }}
      env:
        CODE_SIGN_CERT: ${{ secrets.CODE_SIGN_CERT }}
      run: |
        if [ -z "$CODE_SIGN_CERT" ]; then
          echo "No certificate provided, skipping code signing"
          exit 1
        else
          echo "$CODE_SIGN_CERT" > OmenMon-GitHub.pfx.txt
        fi
      shell: bash

    - name: "Decode Certificate"
      if: steps.cert_retrieve.outcome == 'success'
      continue-on-error: true
      id: cert_decode
      working-directory: ${{ github.workspace }}
      run: >
          certutil -decode OmenMon-GitHub.pfx.txt OmenMon-GitHub.pfx

    - name: "Sign OmenMon"
      if: steps.cert_decode.outcome == 'success'
      continue-on-error: true
      working-directory: ${{ github.workspace }}
      run: >
        & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe' sign
        /d OmenMon /du https://omenmon.github.io/
        /f OmenMon-GitHub.pfx /fd sha256
        /td sha256 /tr http://timestamp.digicert.com/
        /v ${{ env.BIN_DIR }}\\OmenMon.exe

    - name: "Upload OmenMon"
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: ${{ github.event.repository.name }}
        path: ${{ env.BIN_DIR }}
